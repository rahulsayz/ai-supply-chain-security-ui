'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { 
  Network, 
  Shield, 
  AlertTriangle, 
  Building, 
  Zap, 
  Eye,
  Target,
  TrendingUp,
  Activity
} from 'lucide-react'

interface Threat {
  id: string
  vendorName: string
  threatType: string
  severity: number
  aiRiskScore: number
  status: string
}

interface Vendor {
  id: string
  name: string
  riskLevel: string
  riskScore: number
  threatCount: number
}

interface VendorNode {
  id: string
  name: string
  riskLevel: 'critical' | 'high' | 'medium' | 'low'
  riskScore: number
  threatCount: number
  x: number
  y: number
  connections: string[]
  aiAnalysis: {
    threatPatterns: string[]
    recommendations: string[]
    confidence: number
  }
}

interface AttackVector {
  from: string
  to: string
  type: string
  severity: number
  aiDetected: boolean
}

interface SupplyChainVulnerabilityMapProps {
  vendors: Vendor[]
  threats: Threat[]
  isLoading: boolean
}

export function SupplyChainVulnerabilityMap({ vendors, threats, isLoading }: SupplyChainVulnerabilityMapProps) {
  const [selectedVendor, setSelectedVendor] = useState<VendorNode | null>(null)
  const [isSimulating, setIsSimulating] = useState(false)
  const [simulationStep, setSimulationStep] = useState(0)

  // Generate vendor nodes with positions
  const vendorNodes: VendorNode[] = vendors?.map((vendor, index) => {
    const angle = (index / (vendors?.length || 1)) * 2 * Math.PI
    const radius = 120
    const x = Math.cos(angle) * radius + 200
    const y = Math.sin(angle) * radius + 150
    
    // Generate connections to other vendors
    const connections = vendors
      ?.filter((_, i) => i !== index && Math.random() > 0.6)
      .map(v => v.id)
      .slice(0, 3) || []

    return {
      id: vendor.id,
      name: vendor.name,
      riskLevel: vendor.riskLevel as 'critical' | 'high' | 'medium' | 'low',
      riskScore: vendor.riskScore,
      threatCount: vendor.threatCount,
      x,
      y,
      connections,
      aiAnalysis: {
        threatPatterns: [
          "Vector search found 12 similar attacks in past 6 months",
          "Multimodal analysis detected suspicious certificate changes",
          "AI recommends: Implement zero-trust access within 48 hours"
        ],
        recommendations: [
          "Rotate API keys immediately",
          "Implement additional monitoring",
          "Conduct security audit"
        ],
        confidence: 85 + Math.random() * 10
      }
    }
  }) || []

  // Generate attack vectors
  const attackVectors: AttackVector[] = vendorNodes.flatMap(node => 
    node.connections.map(connectionId => ({
      from: node.id,
      to: connectionId,
      type: ['data_exfiltration', 'credential_theft', 'supply_chain_injection'][Math.floor(Math.random() * 3)],
      severity: Math.floor(Math.random() * 5) + 1,
      aiDetected: Math.random() > 0.3
    }))
  )

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'bg-red-500'
      case 'high': return 'bg-orange-500'
      case 'medium': return 'bg-yellow-500'
      case 'low': return 'bg-green-500'
      default: return 'bg-gray-500'
    }
  }

  const getRiskBorderColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'border-red-500'
      case 'high': return 'border-orange-500'
      case 'medium': return 'border-yellow-500'
      case 'low': return 'border-green-500'
      default: return 'border-gray-500'
    }
  }

  const getRiskPulseColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'animate-pulse bg-red-500'
      case 'high': return 'animate-pulse bg-orange-500'
      case 'medium': return 'animate-pulse bg-yellow-500'
      case 'low': return 'bg-green-500'
      default: return 'bg-gray-500'
    }
  }

  const simulateThreatDetection = async () => {
    setIsSimulating(true)
    setSimulationStep(0)
    
    const steps = [
      "Scanning vendor network...",
      "Analyzing threat patterns...",
      "Detecting attack vectors...",
      "Generating AI recommendations...",
      "Updating vulnerability map..."
    ]
    
    for (let i = 0; i < steps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000))
      setSimulationStep(i + 1)
    }
    
    setIsSimulating(false)
    setSimulationStep(0)
  }

  if (isLoading) {
    return (
      <Card className="border-2 border-dashed border-primary/30 bg-gradient-to-br from-primary/5 to-blue-500/5">
        <CardHeader className="text-center">
          <div className="flex items-center justify-center w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10">
            <Network className="h-8 w-8 text-primary animate-pulse" />
          </div>
          <CardTitle className="text-2xl">Vulnerability Map Loading...</CardTitle>
          <CardDescription>
            AI is analyzing your supply chain network
          </CardDescription>
        </CardHeader>
      </Card>
    )
  }

  return (
    <Card className="border-2 border-purple-300 bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-950/20 dark:to-indigo-950/20 shadow-xl">
      <CardHeader className="pb-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500/20 to-indigo-500/20 border border-purple-500/30">
              <Network className="h-6 w-6 text-purple-600" />
            </div>
            <div>
              <CardTitle className="text-2xl text-purple-800 dark:text-purple-200">
                Supply Chain Vulnerability Map
              </CardTitle>
              <CardDescription className="text-purple-700 dark:text-purple-300">
                Interactive network graph with AI-powered threat detection
              </CardDescription>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              onClick={simulateThreatDetection}
              disabled={isSimulating}
              variant="outline"
              size="sm"
              className="border-purple-300 text-purple-700"
            >
              {isSimulating ? (
                <>
                  <div className="w-4 h-4 border-2 border-purple-300 border-t-purple-600 rounded-full animate-spin mr-2"></div>
                  Scanning...
                </>
              ) : (
                <>
                  <Activity className="h-4 w-4 mr-2" />
                  Scan Network
                </>
              )}
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Network Visualization */}
        <div className="relative bg-white/60 dark:bg-white/10 rounded-xl p-6 border border-purple-200/50 min-h-[400px]">
          {/* Attack Vectors (Lines) */}
          <svg className="absolute inset-0 w-full h-full pointer-events-none">
            {attackVectors.map((vector, index) => {
              const fromNode = vendorNodes.find(n => n.id === vector.from)
              const toNode = vendorNodes.find(n => n.id === vector.to)
              
              if (!fromNode || !toNode) return null
              
              return (
                <g key={index}>
                  {/* Main line */}
                  <line
                    x1={fromNode.x}
                    y1={fromNode.y}
                    x2={toNode.x}
                    y2={toNode.y}
                    stroke={vector.aiDetected ? "#ef4444" : "#6b7280"}
                    strokeWidth={vector.severity}
                    strokeDasharray={vector.aiDetected ? "5,5" : "none"}
                    className="animate-pulse"
                  />
                  
                  {/* Arrow head */}
                  <polygon
                    points={`${toNode.x},${toNode.y} ${toNode.x-8},${toNode.y-4} ${toNode.x-8},${toNode.y+4}`}
                    fill={vector.aiDetected ? "#ef4444" : "#6b7280"}
                  />
                  
                  {/* Threat type label */}
                  <text
                    x={(fromNode.x + toNode.x) / 2}
                    y={(fromNode.y + toNode.y) / 2 - 10}
                    textAnchor="middle"
                    className="text-xs font-semibold fill-purple-700"
                  >
                    {vector.type.replace('_', ' ')}
                  </text>
                </g>
              )
            })}
          </svg>

          {/* Vendor Nodes */}
          {vendorNodes.map((node) => (
            <div
              key={node.id}
              className={`absolute w-16 h-16 rounded-full border-4 ${getRiskBorderColor(node.riskLevel)} cursor-pointer transition-all duration-300 hover:scale-110 hover:shadow-lg`}
              style={{ left: node.x - 32, top: node.y - 32 }}
              onClick={() => setSelectedVendor(node)}
            >
              <div className={`w-full h-full rounded-full ${getRiskPulseColor(node.riskLevel)} flex items-center justify-center text-white font-bold text-sm`}>
                {node.name.charAt(0)}
              </div>
              
              {/* Risk indicator */}
              <div className="absolute -top-2 -right-2 w-6 h-6 bg-white rounded-full border-2 border-gray-300 flex items-center justify-center">
                <div className={`w-3 h-3 rounded-full ${getRiskColor(node.riskLevel)}`}></div>
              </div>
              
              {/* Threat count */}
              {node.threatCount > 0 && (
                <div className="absolute -bottom-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-white text-xs font-bold">
                  {node.threatCount}
                </div>
              )}
            </div>
          ))}

          {/* Legend */}
          <div className="absolute bottom-4 left-4 bg-white/80 dark:bg-gray-800/80 rounded-lg p-3 border border-purple-200/50">
            <div className="text-sm font-semibold text-purple-800 dark:text-purple-200 mb-2">Legend</div>
            <div className="space-y-2 text-xs">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                <span>Critical Risk</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-orange-500 rounded-full animate-pulse"></div>
                <span>High Risk</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                <span>Medium Risk</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                <span>Low Risk</span>
              </div>
            </div>
          </div>

          {/* AI Status */}
          <div className="absolute top-4 right-4 bg-gradient-to-r from-purple-100 to-indigo-100 dark:from-purple-900/20 dark:to-indigo-900/20 rounded-lg p-3 border border-purple-200/50">
            <div className="flex items-center gap-2 mb-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm font-semibold text-purple-700 dark:text-purple-300">AI Active</span>
            </div>
            <div className="text-xs text-purple-600 dark:text-purple-400">
              {isSimulating ? `Step ${simulationStep}/5` : 'Monitoring network'}
            </div>
          </div>
        </div>

        {/* Selected Vendor Details */}
        {selectedVendor && (
          <div className="bg-white/60 dark:bg-white/10 rounded-xl p-4 border border-purple-200/50">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <Building className="h-5 w-5 text-purple-600" />
                <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200">
                  {selectedVendor.name} - AI Analysis
                </h3>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedVendor(null)}
                className="text-purple-600 hover:text-purple-700"
              >
                ×
              </Button>
            </div>
            
            <div className="grid md:grid-cols-2 gap-4">
              {/* Threat Patterns */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-700 dark:text-purple-300 flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4" />
                  AI-Detected Threat Patterns
                </h4>
                <div className="space-y-2">
                  {selectedVendor.aiAnalysis.threatPatterns.map((pattern, index) => (
                    <div key={index} className="text-sm text-gray-700 dark:text-gray-300 bg-red-50 dark:bg-red-950/20 rounded p-2 border border-red-200/50">
                      {pattern}
                    </div>
                  ))}
                </div>
              </div>
              
              {/* AI Recommendations */}
              <div className="space-y-3">
                <h4 className="font-semibold text-purple-700 dark:text-purple-300 flex items-center gap-2">
                  <Shield className="h-4 w-4" />
                  AI Recommendations
                </h4>
                <div className="space-y-2">
                  {selectedVendor.aiAnalysis.recommendations.map((rec, index) => (
                    <div key={index} className="text-sm text-gray-700 dark:text-gray-300 bg-green-50 dark:bg-green-950/20 rounded p-2 border border-green-200/50">
                      {rec}
                    </div>
                  ))}
                </div>
                
                <div className="flex items-center gap-2 text-sm text-purple-600 dark:text-purple-400">
                  <TrendingUp className="h-4 w-4" />
                  <span>AI Confidence: {selectedVendor.aiAnalysis.confidence.toFixed(1)}%</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Network Statistics */}
        <div className="grid grid-cols-4 gap-4">
          <div className="text-center p-3 bg-white/60 dark:bg-white/10 rounded-lg border border-purple-200/50">
            <div className="text-2xl font-bold text-purple-600">{vendorNodes.length}</div>
            <div className="text-sm text-purple-700 dark:text-purple-300">Vendors</div>
          </div>
          <div className="text-center p-3 bg-white/60 dark:bg-white/10 rounded-lg border border-purple-200/50">
            <div className="text-2xl font-bold text-red-600">{attackVectors.length}</div>
            <div className="text-sm text-red-700 dark:text-red-300">Attack Vectors</div>
          </div>
          <div className="text-center p-3 bg-white/60 dark:bg-white/10 rounded-lg border border-purple-200/50">
            <div className="text-2xl font-bold text-orange-600">{vendorNodes.filter(n => n.riskLevel === 'critical' || n.riskLevel === 'high').length}</div>
            <div className="text-sm text-orange-700 dark:text-orange-300">High Risk</div>
          </div>
          <div className="text-center p-3 bg-white/60 dark:bg-white/10 rounded-lg border border-purple-200/50">
            <div className="text-2xl font-bold text-green-600">{attackVectors.filter(v => v.aiDetected).length}</div>
            <div className="text-sm text-green-700 dark:text-green-300">AI Detected</div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex items-center justify-center gap-3 pt-2">
          <Button variant="outline" size="sm" className="text-purple-700 border-purple-300">
            <Eye className="h-4 w-4 mr-2" />
            Export Map
          </Button>
          <Button variant="outline" size="sm" className="text-purple-700 border-purple-300">
            <Target className="h-4 w-4 mr-2" />
            AI Settings
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
